区块链教程区块链背后的信息安全2DES、3DES加密算法原理一，2018年下半年，区块链行业正逐渐褪去发展之初的浮躁、回归理性，表面上看相关人才需求与身价似乎正在回落。但事实上，正是初期泡沫的渐退，让人们更多的关注点放在了区块链真正的技术之上。DES、3DES加密算法原理及其GO语言实现DES加密算法，为对称加密算法中的一种。70年代初由IBM研发，后1977年被美国国家标准局采纳为数据加密标准，即DES全称的由来：DataEncryptionStandard。对称加密算法，是相对于非对称加密算法而言的。两者区别在于，对称加密在加密和解密时使用同一密钥，而非对称加密在加密和解密时使用不同的密钥，即公钥和私钥。常见的DES、3DES、AES均为对称加密算法，而RSA、椭圆曲线加密算法，均为非对称加密算法。DES是以64比特的明文为一个单位来进行加密的，超过64比特的数据，要求按固定的64比特的大小分组，分组有很多模式，后续单独总结，暂时先介绍DES加密算法。DES使用的密钥长度为64比特，但由于每隔7个比特设置一个奇偶校验位，因此其密钥长度实际为56比特。奇偶校验为最简单的错误检测码，即根据一组二进制代码中1的个数是奇数或偶数来检测错误。Feistel网络DES的基本结构，由IBM公司的HorstFeistel设计，因此称Feistel网络。在Feistel网络中，加密的每个步骤称为轮，经过初始置换后的64位明文，进行了16轮Feistel轮的加密过程，最后经过终结置换后形成最终的64位密文。64比特明文被分为左、右两部分处理，右侧数据和子密钥经过轮函数f生成用于加密左侧数据的比特序列，与左侧数据异或运算，运算结果输出为加密后的左侧，右侧数据则直接输出为右侧。其中子密钥为本轮加密使用的密钥，每次Feistel均使用不同的子密钥。子密钥的计算，以及轮函数的细节，稍后下文介绍。由于一次Feistel轮并不会加密右侧，因此需要将上一轮输出后的左右两侧对调后，重复Feistel轮的过程，DES算法共计进行16次Feistel轮，最后一轮输出后左右两侧无需对调。DES加密和解密的过程一致，均使用Feistel网络实现，区别仅在于解密时，密文作为输入，并逆序使用子密钥。go标准库中DES算法实现如下：funccryptBlock(subkeys[]uint64,dst,src[]byte,decryptbool){b:=binary.BigEndian.Uint64(src)//初始置换b=permuteInitialBlock(b)left,right:=uint32(b&gt;&gt;32),uint32(b)varsubkeyuint64//共计16次feistel轮fori:=0;i&lt;16;i++{//加密和解密使用子密钥顺序相反ifdecrypt{subkey=subkeys[15-i]}else{subkey=subkeys[i]}//feistel轮函数left,right=right,left^feistel(right,subkey)}//最后一轮无需对调preOutput:=(uint64(right)&lt;&gt;28))rightRotations:=ksRotate(uint32(permutedKey&lt;&gt;4)//生成子密钥fori:=0;i&lt;16;i++{//合并左右两部分，之后PC-2置换pc2Input:=uint64(leftRotations[i])&lt;&lt;28|uint64(rightRotations[i])c.subkeys[i]=permuteBlock(pc2Input,permutedChoice2[:])}}//代码位置src/crypto/des/block.go附go标准库中使用的PC-1置换表和PC-2置换表：//PC-1置换表varpermutedChoice1=[56]byte{7,15,23,31,39,47,55,63,6,14,22,30,38,46,54,62,5,13,21,29,37,45,53,61,4,12,20,28,1,9,17,25,33,41,49,57,2,10,18,26,34,42,50,58,3,11,19,27,35,43,51,59,36,44,52,60,}//PC-2置换表varpermutedChoice2=[48]byte{42,39,45,32,55,51,53,28,41,50,35,46,33,37,44,52,30,48,40,49,29,36,43,54,15,4,25,19,9,1,26,16,5,11,23,8,12,7,17,0,22,3,10,14,6,20,27,24,}//代码位置src/crypto/des/const.go未完待续感谢关注兄弟连区块链教程分享！