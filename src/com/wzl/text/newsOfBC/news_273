Feistel轮函数每次Feistel轮函数内部，均经过4种运算，即：1、扩展置换：右侧32位做扩展置换，扩展置换将32位输入扩展成为48位输出，使得扩展后输出数据长度与48位子密钥等长。2、异或运算：右侧32位扩展置换为48位后，与48位子密钥做异或运算。3、S盒置换：将异或运算后的48位结果，分成8个6位的块，每块通过S盒置换产生4位的输出，8个块S盒置换后组成32位的输出。S盒置换的过程为：6位中取第1位和第6位组成行号，剩余第2、3、4、5位组成列号，从S盒置换表中取出相应行、列的十进制数，并转化为4位二进制数，即为S盒输出。4、P盒置换：S盒置换后的32位输出数据，进行P盒置换，仍然输出为32位数据。go标准库中DESFeistel轮函数代码如下：funcfeistel(rightuint32,keyuint64)(resultuint32){//右侧32位扩展置换为48位，并与48位子密钥做异或运算sBoxLocations:=key^expandBlock(right)varsBoxResultuint32fori:=uint8(0);i&gt;42、sBoxLocations&lt;&gt;42)&amp;0x3fsBoxLocations&lt;&gt;4)//剩余第2、3、4、5位组成列号column:=(sBoxLocation&gt;&gt;1)&amp;0xf//feistelBox包括了S盒置换和P盒置换的实现sBoxResult^=feistelBox[i][16*row+column]}returnsBoxResult}varfeistelBox[8][64]uint32//P盒置换funcpermuteBlock(srcuint64,permutation[]uint8)(blockuint64){forposition,n:=rangepermutation{bit:=(src&gt;&gt;n)&amp;1block|=bit&lt;&lt;uint((len(permutation)-1)-position)}return}//初始化feistelBoxfuncinit(){fors:=rangesBoxes{fori:=0;i&lt;4;i++{forj:=0;j&lt;16;j++{f:=uint64(sBoxes[s][i][j])&lt;加密-&gt;加密的方式，而是采用了加密-&gt;解密-&gt;加密的方式。当三重密钥均相同时，前两步相互抵消，相当于仅实现了一次加密，因此可实现对普通DES加密算法的兼容。3DES解密过程，与加密过程相反，即逆序使用密钥。go标准中3DES加密算法的实现如下：typetripleDESCipherstruct{cipher1,cipher2,cipher3desCipher}funcNewTripleDESCipher(key[]byte)(cipher.Block,error){iflen(key)!=24{returnnil,KeySizeError(len(key))}c:=new(tripleDESCipher)c.cipher1.generateSubkeys(key[:8])c.cipher2.generateSubkeys(key[8:16])c.cipher3.generateSubkeys(key[16:])returnc,nil}//3DES加密func(c*tripleDESCipher)Encrypt(dst,src[]byte){c.cipher1.Encrypt(dst,src)c.cipher2.Decrypt(dst,dst)c.cipher3.Encrypt(dst,dst)}//3DES解密func(c*tripleDESCipher)Decrypt(dst,src[]byte){c.cipher3.Decrypt(dst,src)c.cipher2.Encrypt(dst,dst)c.cipher1.Decrypt(dst,dst)}//代码位置src/crypto/des/cipher.go后记相比DES，3DES因密钥长度变长，安全性有所提高，但其处理速度不高。因此又出现了AES加密算法，AES较于3DES速度更快、安全性更高，后续单独总结。感谢关注兄弟连区块链教程分享！